                /*
                 * 
                 */
                int gprS = -1;
                int gprD = -1;
                if (Str_RegexMatch(other, "[ \t]*%(pc|sp|r[0-9]+),[ \t]*%(pc|sp|r[0-9]+)", ARR_SIZE(matches), matches)) {
                    char *reg1 = Str_Substr(other, matches[1].rm_so, matches[1].rm_eo);
                    char *reg2 = Str_Substr(other, matches[2].rm_so, matches[2].rm_eo);
                    gprS = Asm_ParseRegOperand(reg1);
                    gprD = Asm_ParseRegOperand(reg2);
                    if (gprS != -1 || gprD != -1) {
                        Asm_Instr asm_instr;
                        asm_instr.ai_instr = 
                              Str_Equals(instr, "add") ? 0x50  
                            : Str_Equals(instr, "sub") ? 0x51 
                            : Str_Equals(instr, "mul") ? 0x52 
                            : Str_Equals(instr, "div") ? 0x53 
                            : Str_Equals(instr, "and") ? 0x60 
                            : Str_Equals(instr, "or")  ? 0x61 
                            : Str_Equals(instr, "xor") ? 0x62 
                            : Str_Equals(instr, "shr") ? 0x70 
                            : Str_Equals(instr, "shl") ? 0x71 
                            : 0;
                        asm_instr.ai_ra = gprS;
                        asm_instr.ai_rb = gprS;
                        asm_instr.ai_rc = gprD;
                        Elf_PushBytes(elf, &asm_instr, sizeof(asm_instr));
                    } else {
                        Show_Error("Line %d: Invalid register", linenum, instr);
                    }


                    free(reg1);
                    free(reg2);
                } else {
                    Show_Error("Line %d: `%s %s` - Invalid instruction arguments", linenum, instr, other);
                }

